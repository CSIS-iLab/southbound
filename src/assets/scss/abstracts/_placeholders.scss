/*====================================
=            Placeholders            =
====================================*/

%font-hind {
  font-family: 'Hind Vadodara', sans-serif;
  font-display: swap;
}

%font-gibson {
  font-family: canada-type-gibson, sans-serif;
  font-display: swap;
}

%font-input {
  font-family: input-sans-compressed, sans-serif;
  font-display: swap;
}

%fontello {
  font-family: $font__fontello;
  font-display: swap;
}

%filters-label {
  @include font-size(16px);
  color: $color__gray-darker;
}

%further-reading {
  ul {
    margin-top: 1rem;
    padding-left: 0;
    list-style-type: none;

    li {
      @extend %p3;
      margin-bottom: 1rem;
    }
  }
}

%focus {
  outline: 2px solid $color__focus;
}

%p1 {
  @include fluid-type(18px, 20px);
  line-height: $font__line-height-body;
}

%p2 {
  @include font-size(18px);
  color: rgba($color__gray-darkest, 0.75);
  line-height: 1.4;
}

%p3 {
  @include font-size(16px);
  color: rgba($color__gray-darkest, 0.65);
  line-height: 1.25;
}

%p4 {
  @include font-size(13px);
  color: rgba($color__gray-darkest, 0.65);
  line-height: 1.24;

  main.homepage & {
    padding-bottom: 0.25rem;
    border-bottom: 1px solid rgba($color__gray-darkest, 0.35);
  }

  main.data & {
    @include font-size(14px);
    color: $color__gray-medium-warm;
    @extend %font-gibson;
    line-height: 1.29;

    &:first-child {
      display: none;
    }
  }
}

%link-gray {
  color: $color__gray-darker;

  &:hover,
  &:focus {
    color: $color__gray-darkest;
  }
}

%icon-pseudo-element {
  position: relative;
  top: -0.05rem;
  display: inline-block;
  @extend %fontello;
  font-weight: normal;
  line-height: 1em;
  text-align: center;
  speak: none;
  -webkit-font-smoothing: antialiased;
  @include font-size(14px);
}

%mobile-margin {
  @for $i from 1 through length($sizes__mobile) {
    $size_name: nth($sizes__mobile, $i);

    $size_index: index($sizes__default, $size_name);

    $size: nth($sizes__default, $size_index - 1);
    $size_up: nth($sizes__default, $size_index);

    $margin: return-map-value($sizes__container-padding, $size) * -1;

    @include breakpoint(
      $break: return-map-value($breakpoints, $size),
      $until: return-map-value($breakpoints, $size_up)
    ) {
      margin-right: $margin;
      margin-left: $margin;
    }
  }
}

%negative-margin {
  @each $size in $sizes__default {
    @include breakpoint($size) {
      $margin: return-map-value($sizes__container-padding, $size) * -1;
      margin: 0 $margin;
    }
  }
}
